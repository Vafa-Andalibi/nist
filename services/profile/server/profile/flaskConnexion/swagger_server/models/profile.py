# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Profile(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, uuid=None, username=None, group=None, resource=None, context=None, description=None, firstname=None, lastname=None, publickey=None, email=None):  # noqa: E501
        """Profile - a model defined in Swagger

        :param uuid: The uuid of this Profile.  # noqa: E501
        :type uuid: str
        :param username: The username of this Profile.  # noqa: E501
        :type username: str
        :param group: The group of this Profile.  # noqa: E501
        :type group: str
        :param resource: The resource of this Profile.  # noqa: E501
        :type resource: str
        :param context: The context of this Profile.  # noqa: E501
        :type context: str
        :param description: The description of this Profile.  # noqa: E501
        :type description: str
        :param firstname: The firstname of this Profile.  # noqa: E501
        :type firstname: str
        :param lastname: The lastname of this Profile.  # noqa: E501
        :type lastname: str
        :param publickey: The publickey of this Profile.  # noqa: E501
        :type publickey: str
        :param email: The email of this Profile.  # noqa: E501
        :type email: str
        """
        self.swagger_types = {
            'uuid': str,
            'username': str,
            'group': str,
            'resource': str,
            'context': str,
            'description': str,
            'firstname': str,
            'lastname': str,
            'publickey': str,
            'email': str
        }

        self.attribute_map = {
            'uuid': 'uuid',
            'username': 'username',
            'group': 'group',
            'resource': 'resource',
            'context': 'context',
            'description': 'description',
            'firstname': 'firstname',
            'lastname': 'lastname',
            'publickey': 'publickey',
            'email': 'email'
        }

        self._uuid = uuid
        self._username = username
        self._group = group
        self._resource = resource
        self._context = context
        self._description = description
        self._firstname = firstname
        self._lastname = lastname
        self._publickey = publickey
        self._email = email

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile of this Profile.  # noqa: E501
        :rtype: Profile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def uuid(self):
        """Gets the uuid of this Profile.


        :return: The uuid of this Profile.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid):
        """Sets the uuid of this Profile.


        :param uuid: The uuid of this Profile.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def username(self):
        """Gets the username of this Profile.


        :return: The username of this Profile.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this Profile.


        :param username: The username of this Profile.
        :type username: str
        """

        self._username = username

    @property
    def group(self):
        """Gets the group of this Profile.


        :return: The group of this Profile.
        :rtype: str
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this Profile.


        :param group: The group of this Profile.
        :type group: str
        """

        self._group = group

    @property
    def resource(self):
        """Gets the resource of this Profile.


        :return: The resource of this Profile.
        :rtype: str
        """
        return self._resource

    @resource.setter
    def resource(self, resource):
        """Sets the resource of this Profile.


        :param resource: The resource of this Profile.
        :type resource: str
        """

        self._resource = resource

    @property
    def context(self):
        """Gets the context of this Profile.


        :return: The context of this Profile.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this Profile.


        :param context: The context of this Profile.
        :type context: str
        """

        self._context = context

    @property
    def description(self):
        """Gets the description of this Profile.


        :return: The description of this Profile.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Profile.


        :param description: The description of this Profile.
        :type description: str
        """

        self._description = description

    @property
    def firstname(self):
        """Gets the firstname of this Profile.


        :return: The firstname of this Profile.
        :rtype: str
        """
        return self._firstname

    @firstname.setter
    def firstname(self, firstname):
        """Sets the firstname of this Profile.


        :param firstname: The firstname of this Profile.
        :type firstname: str
        """

        self._firstname = firstname

    @property
    def lastname(self):
        """Gets the lastname of this Profile.


        :return: The lastname of this Profile.
        :rtype: str
        """
        return self._lastname

    @lastname.setter
    def lastname(self, lastname):
        """Sets the lastname of this Profile.


        :param lastname: The lastname of this Profile.
        :type lastname: str
        """

        self._lastname = lastname

    @property
    def publickey(self):
        """Gets the publickey of this Profile.


        :return: The publickey of this Profile.
        :rtype: str
        """
        return self._publickey

    @publickey.setter
    def publickey(self, publickey):
        """Sets the publickey of this Profile.


        :param publickey: The publickey of this Profile.
        :type publickey: str
        """

        self._publickey = publickey

    @property
    def email(self):
        """Gets the email of this Profile.


        :return: The email of this Profile.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this Profile.


        :param email: The email of this Profile.
        :type email: str
        """

        self._email = email
