# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.nic import NIC  # noqa: F401,E501
from swagger_server import util


class Node(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name=None, state=None, ncpu=None, ram=None, disk=None, nics=None):  # noqa: E501
        """Node - a model defined in Swagger

        :param name: The name of this Node.  # noqa: E501
        :type name: str
        :param state: The state of this Node.  # noqa: E501
        :type state: str
        :param ncpu: The ncpu of this Node.  # noqa: E501
        :type ncpu: int
        :param ram: The ram of this Node.  # noqa: E501
        :type ram: str
        :param disk: The disk of this Node.  # noqa: E501
        :type disk: str
        :param nics: The nics of this Node.  # noqa: E501
        :type nics: List[NIC]
        """
        self.swagger_types = {
            'name': str,
            'state': str,
            'ncpu': int,
            'ram': str,
            'disk': str,
            'nics': List[NIC]
        }

        self.attribute_map = {
            'name': 'name',
            'state': 'state',
            'ncpu': 'ncpu',
            'ram': 'ram',
            'disk': 'disk',
            'nics': 'nics'
        }

        self._name = name
        self._state = state
        self._ncpu = ncpu
        self._ram = ram
        self._disk = disk
        self._nics = nics

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Node.


        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def state(self):
        """Gets the state of this Node.


        :return: The state of this Node.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Node.


        :param state: The state of this Node.
        :type state: str
        """

        self._state = state

    @property
    def ncpu(self):
        """Gets the ncpu of this Node.


        :return: The ncpu of this Node.
        :rtype: int
        """
        return self._ncpu

    @ncpu.setter
    def ncpu(self, ncpu):
        """Sets the ncpu of this Node.


        :param ncpu: The ncpu of this Node.
        :type ncpu: int
        """

        self._ncpu = ncpu

    @property
    def ram(self):
        """Gets the ram of this Node.


        :return: The ram of this Node.
        :rtype: str
        """
        return self._ram

    @ram.setter
    def ram(self, ram):
        """Sets the ram of this Node.


        :param ram: The ram of this Node.
        :type ram: str
        """

        self._ram = ram

    @property
    def disk(self):
        """Gets the disk of this Node.


        :return: The disk of this Node.
        :rtype: str
        """
        return self._disk

    @disk.setter
    def disk(self, disk):
        """Sets the disk of this Node.


        :param disk: The disk of this Node.
        :type disk: str
        """

        self._disk = disk

    @property
    def nics(self):
        """Gets the nics of this Node.


        :return: The nics of this Node.
        :rtype: List[NIC]
        """
        return self._nics

    @nics.setter
    def nics(self, nics):
        """Sets the nics of this Node.


        :param nics: The nics of this Node.
        :type nics: List[NIC]
        """

        self._nics = nics
